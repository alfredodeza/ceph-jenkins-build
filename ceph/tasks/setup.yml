---

- hosts: local

  connection: local

  vars:
    # should be passed in the CLI like `--extra-vars "version=1.23.45 branch=master"`
    version: 0-dev # e.g. 0.78
    branch: master # any existing branch on Github
    release: stable # stable, development, or candidate are valid options
    clean: true # if re-doing a deployment this deletes the remote branch in Jenkin's git repo

  tasks:
     - name: check if ceph repo exists
       stat: path='./ceph'
       register: 'ceph_repo'

     - name: clone the ceph repository
       git: repo=git@jenkins.front.sepia.ceph.com:ceph/ceph dest=ceph
       when: ceph_repo.stat.exists is defined and ceph_repo.stat.exists == false

     - name: rename origin to jenkins
       command: git remote rename origin jenkins chdir=ceph
       ignore_errors: yes

     - name: spit out the remote names
       command: git remote -v chdir=ceph

       # FIXME: branch depends on type of build
     - name: git checkout {{ branch }} branch
       command: git checkout {{ branch }} chdir=ceph

     - name: git submodule update
       command: git submodule update --init chdir=ceph

     - name: replace the version in configure.ac
       lineinfile: dest=ceph/configure.ac
                   regexp='^AC_INIT\(\[ceph\],'
                   line='AC_INIT([ceph], [{{ version }}], [ceph-devel@vger.kernel.org])'

     - include: release/candidate.yml
       when: "release == 'candidate'"

     - include: release/development.yml
       when: "release == 'development'"

     - include: release/stable.yml
       when: "release == 'stable'"

     - name: set the debian version
       command: dch -v {{ version }}-1 -D stable "New upsream release" chdir=ceph

     - name: commit the version changes
       command: git commit -a -m "{{ version }}" chdir=ceph

       # from script: /srv/ceph-build/tag_release.sh
       # Contents of tag_release.sh
     - name: tag and commit the version
       command: git tag -s "v{{ version }}"  -u 17ED316D -m "v{{ version }}" chdir=ceph
       environment:
         GNUPGHOME: ~/build/gnupg.ceph-release

     - name: push changes to jenkins git repo
       command: git push jenkins {{ branch }} chdir=ceph

     - name: push the newly created tag
       command: git push jenkins v{{ version }} chdir=ceph
       environment:
         GNUPGHOME: ~/build/gnupg.ceph-release

     - name: ensure GPG keys exist for release
       command: gpg --list-keys
       register: command_result
       failed_when: "'17ED316D' not in command_result.stdout"
       environment:
         GNUPGHOME: ~/build/gnupg.ceph-release/
